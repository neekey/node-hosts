#!/usr/bin/env node
var inquirer = require( 'inquirer' );
var Utils = require( '../lib/utils' );
var Chalk = require( 'chalk' );
var _ = require( 'underscore' );

var Prompt = {

    _BACK: '↩ 返回',

    /**
     * 主菜单
     */
    main: function(){

        var self = this;

        this.showGroups();

        inquirer.prompt([{
            type: 'list',
            name: 'action',
            message: '请选择操作项：',
            choices: function(){
                var choice = [
                    '设置组开关',
                    '创建组',
                    '添加新规则',
                    '编辑组',
                ];

                var user = Utils.current();

                if( user ){
                    choice = choice.concat( [ '注销' ] );
                }
                else {
                    choice = choice.concat( [ '登录', '注册' ] );
                }

                choice.push( '结束' );

                return choice;
            }
        }], function( answers ) {

            switch( answers.action ){
                case '创建组': {
                    self.addGroup( 'main' );
                    break;
                }
                case '添加新规则': {
                    self.addRule( 'main' );
                    break;
                }
                case '设置组开关': {
                    self.toggleGroups( 'main' );
                    break;
                }
                case '编辑组': {
                    self.editGroups( 'main' );
                    break;
                }
                case '登录': {
                    self.login();
                    break;
                }
                case '注册': {
                    self.signUp();
                    break;
                }
                case '注销': {
                    self.logout();
                    break;
                }
                case '结束': {
                    process.exit(1);
                }
            }
        });
    },

    /**
     * 添加新的群组
     * @param from
     */
    addGroup: function( from ){

        var Groups = Utils.read().groups;
        var self = this;

        inquirer.prompt([{
            type: 'input',
            name: 'name',
            message: '分组名称：',
            validate: function( name ){

                if( name ){
                    var targetGroup = Groups[ name ];

                    if( targetGroup ){
                        return Chalk.yellow( '分组 ') + Chalk.white( name ) + Chalk.yellow( ' 已经存在' );
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return Chalk.yellow( '分组名不能为空' );
                }
            }
        }], function( answers ) {

            var groupName = answers.name;

            Utils.addGroup( groupName, function( err ){
                console.log(Chalk.green( '\n创建新的组成功：' ) + Chalk.white( groupName ) + '\n' );

                inquirer.prompt([{
                    type: 'confirm',
                    name: 'continue',
                    message: '是否继续添加规则到 ' + groupName + '：'
                }], function( answers ){

                    if( answers.continue ){
                        self.addRuleToGroup( groupName );
                    }
                    else {
                        self.main();
                    }
                });
            });
        });
    },

    /**
     * 添加规则
     */
    addRule: function(  ){

        var Groups = Utils.read().groups;
        var self = this;

        inquirer.prompt([{
            type: 'list',
            name: 'name',
            message: '需要添加规则到分组：',
            choices: _.keys( Groups ).concat( [ new inquirer.Separator(), self._BACK ] )
        }], function( answers ) {

            var groupName = answers.name;
            if( groupName == self._BACK ){
                self.main();
            }
            else {
                self.addRuleToGroup( groupName );
            }
        });
    },

    /**
     * 向指定群组中添加规则
     * @param groupName
     */
    addRuleToGroup: function( groupName ){

        var self = this;

        inquirer.prompt([
            {
                type: 'input',
                name: 'domain',
                message: '域名：',
                validate: function( domain ){

                    if( domain ){
                        return true;
                    }
                    else {
                        return Chalk.yellow( '域名不能为空' );
                    }
                }
            },
            {
                type: 'input',
                name: 'ip',
                message: 'IP：',
                validate: function( IP ){

                    if( IP ){
                        var EX = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
                        var ret = EX.exec( IP );
                        if( ret &&
                            ret[ 1 ] <= 255 &&
                            ret[ 2 ] <= 255 &&
                            ret[ 3 ] <= 255 &&
                            ret[ 4 ] <= 255 ){

                            return true;
                        }
                        else {
                            return Chalk.yellow( 'IP格式有误' );
                        }
                    }
                    else {
                        return Chalk.yellow( 'IP不能为空' );
                    }
                }
            }
        ], function( answers ) {

            Utils.addRule( groupName, answers.ip, answers.domain, function(){
                console.log(Chalk.green( '\n添加：' ) + Chalk.white( answers.domain ) + ' ➜ ' + Chalk.white( answers.ip ) + Chalk.green( ' 到 ' + groupName + '成功!\n' ) );

                inquirer.prompt([{
                    type: 'confirm',
                    name: 'continue',
                    message: '是否继续添加规则到 ' + groupName + '：'
                }], function( answers ){

                    if( answers.continue ){
                        self.addRuleToGroup( groupName );
                    }
                    else {
                        self.main();
                    }
                });
            })
        });
    },

    /**
     * 设置群组的启用状态
     * @param from
     */
    toggleGroups: function( from ){

        this.showGroups();

        var Groups = Utils.read().groups;
        var self = this;

        inquirer.prompt([{
            type: 'checkbox',
            name: 'active',
            message: '组列表，调整启用：',
            choices: function(){
                var choices = [];
                _.each( Groups, function( group, name ){
                    choices.push({
                        name: name,
                        checked: group.active == true
                    });
                });

                return choices;
            }
        }], function( answers ) {

            _.each( Groups, function( group, name ){
                group.active = answers.active.indexOf( name ) >= 0;
            });

            Utils.write( Groups, function(){
                console.log( Chalk.green( '\n设置启用状态成功\n' ) );
                self[ from ]();
            });
        });
    },

    /**
     * 编辑群组
     * @param from
     */
    editGroups: function(){

        this.showGroups();

        var Groups = Utils.read().groups;
        var self = this;

        inquirer.prompt([
            {
                type: 'list',
                name: 'name',
                message: '选择要编辑的分组：',
                choices: _.keys( Groups ).concat( [ new inquirer.Separator(), self._BACK ] )
            },
            {
                type: 'list',
                name: 'action',
                message: '对该分组进行..',
                choices: [ '编辑', '删除', new inquirer.Separator(), self._BACK ],
                when: function( answers ){
                    return answers.name != self._BACK;
                }
            }
        ], function( answers ) {

            var groupName = answers.name;
            var action = answers.action;

            if( groupName == self._BACK ){
                self.main();
            }
            else {
                if( action == '编辑' ){
                    self.editRules( groupName );
                }
                else if( action == '删除' ) {

                    Utils.removeGroup( groupName, function(){
                        console.log( Chalk.green( '\n删除分组成功\n' ) );
                        self.editGroups();

                    })
                }
                else {
                    self.editGroups();
                }
            }
        });
    },

    /**
     * 编辑指定群组中的规则
     * @param groupName
     */
    editRules: function( groupName ){

        var Groups = Utils.read().groups;
        var targetGroup = Groups[ groupName ];
        var self = this;

        inquirer.prompt([
            {
                type: 'list',
                name: 'host',
                message: '选择删除的规则：',
                choices: function(){
                    var choices = [];
                    targetGroup.hosts.forEach(function( host, index ){
                        choices.push( index + ': ' + host.ip + ' ➜ ' + host.domain );
                    });

                    choices.push( new inquirer.Separator(), self._BACK );

                    return choices;
                }
            }
        ], function( answers ) {

            var index = answers.host.substring( 0, answers.host.indexOf( ':' ) );

            if( answers.host == self._BACK ){
                self.main();
            }
            else {
                targetGroup.hosts.splice( index, 1 );

                Utils.write( Groups, function(){
                    console.log( Chalk.green( '\n删除规则成功\n' ) );
                    self.editRules( groupName );
                });
            }
        });
    },

    signUp: function(){

        var password = null;
        var self = this;

        inquirer.prompt([
            {
                type: 'input',
                name: 'email',
                message: '邮箱地址：',
                validate: function(){ return true }
            },
            {
                type: 'password',
                name: 'password',
                message: '密码：',
                validate: function( p ){
                    if( p.length < 6 ){
                        return '密码不能少于6位';
                    }
                    else {
                        password = p;
                        return true;
                    }
                }
            },
            {
                type: 'password',
                name: 'passwordConfirm',
                message: '密码确认：',
                validate: function( p ){
                    if( p != password ){
                        return '两次属于密码不一致，请再次确认';
                    }
                    else {
                        return true;
                    }
                }
            }
        ], function( answers ){
            Utils.signUp( answers.email, answers.password, function( error ){
                if( error ){
                    console.log( Chalk.red( '注册失败, ERROR: '), error );
                }
                else {
                    console.log( Chalk.green( '注册成功!' ) );
                    self.main();
                }
            });
        });
    },

    login: function(){

        var self = this;
        inquirer.prompt([
            {
                type: 'input',
                name: 'email',
                message: '邮箱地址：'
            },
            {
                type: 'password',
                name: 'password',
                message: '密码：'
            }
        ], function( answers ){
            Utils.login( answers.email, answers.password, function( error ){
                if( error ){
                    console.log( Chalk.red( '登录失败, ERROR: '), error );
                }
                else {
                    console.log( Chalk.green( '登录成功!' ) );
                    self.main();
                }
            });
        });
    },

    logout: function(){

        Utils.logout();
        console.log( Chalk.green( '\n注销成功!\n' ) );
        this.main();
    },

    /**
     * 展示群组列表
     */
    showGroups: function(){

        var user = Utils.current();
        var Groups = Utils.read().groups;
        console.log( Chalk.blue( '\n---------------------------------' ) );
        if( user ){
            console.log( Chalk.grey('( 登录为: ' + user.get( 'username' ) + ' )') );
        }
        console.log( Chalk.white.underline( '\n组列表(' + _.keys( Groups ).length + ')\n') );
        _.each( Groups, function( group, name ){
            console.log( ' ' + Chalk[ group.active ? 'yellow' : 'grey' ]( ( group.active ? '◉' : '◎' ) + '  ' ) + Chalk[ group.active ? 'white' : 'grey' ]( name ) + Chalk.gray( ' (' + group.hosts.length + ')' ) );
        });
        console.log( Chalk.blue( '----------------------------------\n' ) );
    }
};

/**
 * If logged in, then fetch right after the start.
 */

if( Utils.current() ){

    console.log( Chalk.yellow( '\n同步服务器数据...' ) );
    Utils.fetch( function( error, groups ){
        if( !error ){
            Utils.write( Utils.dataHandle( Utils.read().groups, groups ), function(){
                console.log( Chalk.green( '\n数据同步成功...' ) );
                Prompt.main();
            });
        }
        else {
            console.log( Chalk.red( '\n获取数据失败，但您可以继续使用本地数据.\n' ) );
            Prompt.main();
        }
    });
}
else {
    Prompt.main();
}



